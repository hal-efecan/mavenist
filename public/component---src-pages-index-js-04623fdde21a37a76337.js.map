{"version":3,"sources":["webpack:///./src/styles/banner.module.scss","webpack:///./src/components/postlist.js","webpack:///./src/components/subSection.js","webpack:///./src/components/banners/banner1.js","webpack:///./src/pages/index.js","webpack:///./src/hooks/useSiteMetadata.js"],"names":["module","exports","PostList","postsArr","allMdx","edges","map","post","node","frontmatter","id","excerpt","fields","title","image","section","slug","fluid","childImageSharp","key","to","style","boxShadow","boxSizing","SubSection","articles","article","Banner1","display","flexDirection","alignItems","src","width","height","scrolling","border","marginWidth","className","BannerStyles","banner","frameBorder","margin","banner_small","Index","data","useEffect","document","body","maxWidth","useSiteMetadata","description","template","siteUrl","siteLanguage","siteLocale","twitter","social","href","rel","crossorigin","name","content","titleTemplate","pathname","twitterUsername","padding","textDecoration","textDecorationColor","fontSize","site","siteMetadata"],"mappings":"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","file":"component---src-pages-index-js-04623fdde21a37a76337.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"banner-module--banner--2iMsJ\",\"banner_small\":\"banner-module--banner_small--a3hR3\"};","import React from 'react'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { SectionTitle, ArticleTitle, ImgContainer,\n  Excerpt, ChildContainer, DescriptionContainer,\n  ParentContainer } from '../styled/homePage'\n\nconst PostList = () => {\n    const data = useStaticQuery(query)\n    const postsArr = data.allMdx.edges\n    \n    return (\n      <>\n      <ParentContainer>\n            {\n                postsArr.map(post => {\n                    const { frontmatter, id, excerpt, fields } = post.node\n                    const { title, image, section } = frontmatter\n                    const { slug } = fields\n                    const fluid = image.childImageSharp.fluid\n\n                    return (\n                      <Link key={id} \n                      to={`/${slug}`} \n                      style={{ boxShadow: `none`, boxSizing: `border-box` }}\n                      >\n\n                        <ChildContainer>\n\n                          <ImgContainer>\n                            <Img fluid={fluid} />\n                          </ImgContainer>\n\n                          <DescriptionContainer>\n                            <>\n                              <SectionTitle>{section}</SectionTitle><br/>\n                              <ArticleTitle>{title}</ArticleTitle>\n                            </>\n                            <Excerpt>{excerpt}</Excerpt>\n                          </DescriptionContainer>\n\n                        </ChildContainer>\n                        \n                      </Link>\n                    )\n                })\n            }\n        </ParentContainer>\n        </>\n    )\n}\n\nexport default PostList\n\nconst query = graphql`\n{\n  site {\n        siteMetadata {\n        title\n    }\n  }\n  allMdx(filter: {frontmatter: {isHero: {eq: true}, date: {}}}, sort: {fields: frontmatter___date, order: DESC}) {\n    edges {\n      node {\n        id\n        fields {\n          slug\n        }\n        frontmatter {\n          author\n          date\n          title\n          section\n          isHero\n          image {\n            childImageSharp {\n              id\n              fluid(\n                maxWidth: 400\n                ) {\n                  ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        excerpt(pruneLength: 80)\n      }\n    }\n  }\n}\n`","import React from 'react'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\nimport Img from 'gatsby-image';\n\nimport { SectionTitle, ArticleTitle, Excerpt,\n  ImgContainer,\n  ParentContainer, DescriptionContainer,\n  ChildContainer } from '../styled/listElements'\n\nconst SubSection = () => {\n    const data = useStaticQuery(query)\n    const articles = data.allMdx.edges\n\n    return (\n\n          <ParentContainer>\n            {\n              articles.map(article => {\n                const { id, frontmatter, excerpt, fields } = article.node\n                const { title, section, image } = frontmatter\n                const { slug } = fields\n                const fluid = image.childImageSharp.fluid\n\n                return (\n                  <Link \n                  style={{ boxShadow: `none`, boxSizing: `border-box` }}\n                  key={id} \n                  to={`/${slug}`}\n                  >\n                    <ChildContainer>\n\n                        <ImgContainer>\n                          <Img fluid={fluid} />\n                        </ImgContainer>\n\n                        <DescriptionContainer>\n                          <div>\n                            <SectionTitle>{section}</SectionTitle><br />\n                            <ArticleTitle>{title}</ArticleTitle>\n                          </div>\n                          <Excerpt>{excerpt}</Excerpt>\n                        </DescriptionContainer>\n\n                    </ChildContainer>\n                  </Link>\n                )\n              })\n            }\n\n            </ParentContainer>\n    )\n}\n\nexport default SubSection\n\nconst query = graphql`\n{\n  allMdx(filter: {frontmatter: {isSubSection: {eq: true}}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          id\n          frontmatter {\n            author\n            date\n            title\n            section\n            isHero\n            image {\n              childImageSharp {\n                id\n                fluid(maxWidth: 400) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          }\n            fields {\n              slug\n            }\n          excerpt(pruneLength: 250)\n        }\n      }\n  }\n}\n`","import React from 'react'\nimport BannerStyles from '../../styles/banner.module.scss';\n\nconst Banner1 = () => {\n    return (\n        <div style={{ display: `flex`, flexDirection: `column`, alignItems: `center` }}>\n            <iframe src=\"https://rcm-eu.amazon-adsystem.com/e/cm?o=2&p=48&l=ur1&category=piv&banner=0CQ53D02W107RHR3JVR2&f=ifr&linkID=1e76e6a9ad38532d3b6b1c910a6ca86b&t=themavenist-21&tracking_id=themavenist-21\" \n            width=\"728\" \n            height=\"90\"\n            title=\"Amazon Prime banner advertisment\"\n            scrolling=\"no\" \n            border=\"0\" \n            marginWidth=\"0\"\n            className={BannerStyles.banner}\n            frameBorder=\"0\"></iframe>\n\n            <iframe src=\"https://rcm-eu.amazon-adsystem.com/e/cm?o=2&p=22&l=ur1&category=piv&banner=1K2T9PSWF9KM5TPDGW02&f=ifr&linkID=a6cd1d8506b59630f93e5eff702bf352&t=themavenist-21&tracking_id=themavenist-21\" \n            width=\"250\" \n            height=\"250\"\n            margin=\"0 auto 0 auto\"\n            title=\"Amazon Prime banner advertisment\"\n            scrolling=\"no\" \n            border=\"0\" \n            marginWidth=\"0\" \n            className={BannerStyles.banner_small}\n            frameBorder=\"0\"></iframe>\n\n        </div>\n    )\n}\n\nexport default Banner1\n","import React, { useEffect } from \"react\"\nimport PostList from '../components/postlist'\nimport SubSection from '../components/subSection'\nimport Layout from \"../components/layout/layout\"\nimport Helmet from 'react-helmet'\nimport Banner1 from '../components/banners/banner1'\n\nimport { useSiteMetadata } from '../hooks/useSiteMetadata'\nimport { PageContainer } from '../styled/homePage'\nimport SEO from 'react-seo-component'\n\nconst Index = ({ data }) => {\n\n  useEffect(() => {\n    document.body.style.maxWidth = \"1366px\"\n    document.body.style.margin = \"0 auto\"\n  }, [])\n\n    const {\n      description,\n      template,\n      title,\n      image,\n      siteUrl,\n      siteLanguage,\n      siteLocale,\n      social: {\n          twitter\n      }\n    } =  useSiteMetadata()\n\n  return (\n            <Layout>\n\n              <Helmet>\n                <link href=\"https://ir-uk.amazon-adsystem.com\" rel=\"dns-prefetch\" />\n                <link href=\"https://ir-uk.amazon-adsystem.com\" rel=\"preload\" />\n                <link href=\"https://ir-uk.amazon-adsystem.com\" rel=\"preconnect\" crossorigin/>\n                <meta name=\"verification\" content=\"c1493834aa1a60cb8dd2189fbd7ae5fa\" />\n              </Helmet>\n\n              <SEO\n                title={title}\n                titleTemplate={template}\n                description={description}\n                image={`${siteUrl}${image}`}\n                pathname={siteUrl}\n                siteLanguage={siteLanguage}\n                siteLocale={siteLocale}\n                twitterUsername={twitter}\n                />\n\n              <PageContainer>\n                <PostList />\n                <Banner1 />\n                <h1 style={{ \n                  margin: `30px auto -10px auto`, \n                  padding: `0 0 0 30px`,\n                  textDecoration: `underline`,\n                  textDecorationColor: `orangered`,\n                  fontSize: `3.25rem` \n                  }}>Latest</h1>\n                <SubSection />\n              </PageContainer>\n\n            </Layout>\n        )\n}\n\nexport default Index","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useSiteMetadata = () => {\n    const { site } = useStaticQuery(graphql`\n    query SITE_METADATA_QUERY {\n        site {\n            siteMetadata {\n                description\n                template\n                title\n                image\n                siteUrl\n                siteLanguage\n                siteLocale\n                social {\n                    twitter\n                }\n                \n            }\n        }\n    }\n    `)\n\n    return site.siteMetadata\n}"],"sourceRoot":""}