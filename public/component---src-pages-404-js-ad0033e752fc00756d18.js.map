{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/pages/404.js"],"names":["SEO","description","lang","meta","metaImage","image","title","pathname","site","metaDescription","siteMetadata","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","href","name","content","property","social","twitter","concat","defaultProps","NotFoundPage","data","location","siteTitle","pageQuery"],"mappings":"6oBAYMA,EAAM,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,YAAaC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,KAAaC,EAAiC,EAAxCC,MAAkBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAEvDC,EAFsE,OAEtEA,KAoBFC,EAAkBR,GAAeO,EAAKE,aAAaT,YAEnDI,EACJD,EAAS,GACFI,EAAKE,aAAaC,QAAUP,EAC/B,KAEAQ,EAAYL,EAAQ,GAAMC,EAAKE,aAAaC,QAAUJ,EAAa,KAEzE,OAEE,kBAAC,IAAD,CACEM,eAAgB,CACdX,QAEFI,MAAOA,EACPQ,cAAa,QAAUN,EAAKE,aAAaJ,MACzCS,KACEH,EACI,CACE,CACEI,IAAK,YACLC,KAAML,IAGV,GAENT,KAAM,CACJ,CACEe,KAAK,cACLC,QAASV,GAEX,CACEW,SAAS,WACTD,QAASb,GAEX,CACEc,SAAS,iBACTD,QAASV,GAEX,CACEW,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,gBACLC,QAASX,EAAKE,aAAaL,OAE7B,CACEa,KAAK,kBACLC,QAASX,EAAKE,aAAaW,OAAOC,SAEpC,CACEJ,KAAK,gBACLC,QAASb,GAEX,CACEY,KAAK,sBACLC,QAASV,IAGZc,OACCnB,EACE,CACE,CACEgB,SAAU,WACVD,QAASd,GAUX,CACEa,KAAM,eACNC,QAAS,wBAGb,CACE,CACED,KAAM,eACNC,QAAS,aAIZI,OAAOpB,MAOHH,MAEfA,EAAIwB,aAAe,CACjBtB,KAAK,KACLC,KAAM,GACNF,YAAY,K,kCC1Id,kGAkBewB,UAZM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACtBC,EAAYF,EAAKlB,KAAKE,aAAaJ,MAEzC,OACE,kBAAC,IAAD,CAAQqB,SAAUA,EAAUrB,MAAOsB,GACjC,kBAAC,IAAD,CAAKtB,MAAM,mBACX,yCACA,wFAOC,IAAMuB,EAAS","file":"component---src-pages-404-js-ad0033e752fc00756d18.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, image: metaImage, title, pathname }) => {\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author {\n              name,\n              summary\n            }\n            siteUrl\n            image\n            social { twitter }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  \n  const image =\n    metaImage // && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage}` // ${metaImage.src}\n      : null\n      \n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:image`, // `twitter:image:src`,\n          content: site.siteMetadata.image,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n      .concat(\n        metaImage\n        ? [\n            {\n              property: \"og:image\",\n              content: image,\n            },\n            // {\n            //   property: \"og:image:width\",\n            //   content: metaImage.width,\n            // },\n            // {\n            //   property: \"og:image:height\",\n            //   content: metaImage.height,\n            // },\n            {\n              name: \"twitter:card\",\n              content: \"summary_large_image\",\n            },\n          ]\n        : [\n            {\n              name: \"twitter:card\",\n              content: \"summary\",\n            },\n          ]\n          )\n          .concat(meta)\n        }\n    />\n\n    )\n}\n\nexport default SEO\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n  // title: ``,\n  // image: ``,\n  // article: false\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n\n  // image: PropTypes.string,\n  // article: PropTypes.bool,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    // height: PropTypes.number.isRequired,\n    // width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n\n\n\n// const query = graphql`\n// query {\n//   site {\n//     siteMetadata {\n//       title\n//       description\n//       author {\n//         name,\n//         summary\n//       }\n//       siteUrl\n//       image\n//       social { twitter }\n//     }\n//   }\n// }\n// `","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"404: Not Found\" />\n      <h1>Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}