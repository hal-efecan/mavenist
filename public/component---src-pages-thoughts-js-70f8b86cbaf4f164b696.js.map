{"version":3,"sources":["webpack:///./src/hooks/useSiteMetadata.js","webpack:///./src/components/thoughts.js","webpack:///./src/pages/thoughts.js"],"names":["useSiteMetadata","site","siteMetadata","ThoughtsArticles","data","articles","allMdx","edges","map","article","console","log","node","id","frontmatter","excerpt","fields","title","section","image","date","slug","fluid","childImageSharp","dates","allSitePage","edge","subSlug","context","lastMod","lastmod","Date","getDate","getMonth","dayCreated","monthCreated","finalDate","formatMonth","style","boxShadow","boxSizing","key","to","color","fontSize","fontWeight","fontFamily","letterSpacing","textTransform","Thoughts","template","siteUrl","siteLanguage","siteLocale","twitter","social","titleTemplate","description","pathname","twitterUsername"],"mappings":"gwFAEaA,EAAkB,WAqB3B,OArBiC,OACzBC,KAoBIC,e,6lBCwDDC,EAtEU,WACrB,IAAMC,EAAI,OACJC,EAAWD,EAAKE,OAAOC,MAE7B,OACI,kBAAC,IAAD,KAGMF,EAASG,KAAI,SAAAC,GACXC,QAAQC,IAAIF,GADU,MAEuBA,EAAQG,KAA7CC,EAFc,EAEdA,GAAIC,EAFU,EAEVA,YAAaC,EAFH,EAEGA,QAASC,EAFZ,EAEYA,OAC1BC,EAAgCH,EAAhCG,MAAOC,EAAyBJ,EAAzBI,QAASC,EAAgBL,EAAhBK,MAAOC,EAASN,EAATM,KACvBC,EAASL,EAATK,KACFC,EAAQH,EAAMI,gBAAgBD,MAEhCE,EAAK,GAeT,OAdApB,EAAKqB,YAAYlB,MAAMC,KAAI,SAAAkB,GACzB,IAAMC,EAAUD,EAAKd,KAAKgB,QAAQP,KAC5BQ,EAAUH,EAAKd,KAAKgB,QAAQE,QAElC,GAAGH,IAAYN,EAAM,CACL,IAAIU,KAAKF,GAASG,UAChB,IAAID,KAAKF,GAASI,WADhC,IAEMC,EAAa,IAAIH,KAAKX,GAAMY,UAC5BG,EAAe,IAAIJ,KAAKX,GAAMa,WAC9BG,EAAeC,sBAAYF,GAAlB,IAAmCD,EAClDV,EAAQY,MAKZ,kBAAC,OAAD,CACAE,MAAO,CAAEC,UAAU,OAASC,UAAU,cACtCC,IAAK5B,EACL6B,GAAE,IAAMrB,GAGN,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAOA,KAGd,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KAAeJ,GACf,0BACEoB,MAAO,CAAEK,MAAM,OACfC,SAAS,UACTC,WAAW,OACXC,WAAW,wBACXC,cAAc,UACdC,cAAc,cANhB,MAOSxB,GAAa,6BACtB,kBAAC,IAAD,KAAeP,IAEjB,kBAAC,IAAD,KAAUF,W,oCCtBnBkC,UAlCE,SAAC,GAAa,EAAX7C,KAAY,IAAD,EAWpBJ,cATHkD,EAFuB,EAEvBA,SACAjC,EAHuB,EAGvBA,MACAE,EAJuB,EAIvBA,MACAgC,EALuB,EAKvBA,QACAC,EANuB,EAMvBA,aACAC,EAPuB,EAOvBA,WAEIC,EATmB,EAQvBC,OACID,QAIR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIrC,MAAOA,EACPuC,cAAeN,EACfO,YAAW,4BACXtC,MAAK,GAAKgC,EAAUhC,EACpBuC,SAAUP,EACVC,aAAcA,EACdC,WAAYA,EACZM,gBAAiBL,IAGrB,kBAAC,IAAD,KACI,kBAAC,EAAD","file":"component---src-pages-thoughts-js-70f8b86cbaf4f164b696.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useSiteMetadata = () => {\n    const { site } = useStaticQuery(graphql`\n    query SITE_METADATA_QUERY {\n        site {\n            siteMetadata {\n                description\n                template\n                title\n                image\n                siteUrl\n                siteLanguage\n                siteLocale\n                social {\n                    twitter\n                }\n                \n            }\n        }\n    }\n    `)\n\n    return site.siteMetadata\n}","import React from 'react'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\nimport Img from 'gatsby-image';\nimport { formatMonth } from '../utils/utilityFn'\n\nimport { SectionTitle, ArticleTitle, ImgContainer,\n  Excerpt, ParentContainer, DescriptionContainer,\n  ChildContainer } from '../styled/listElements'\n\nconst ThoughtsArticles = () => {\n    const data = useStaticQuery(query)\n    const articles = data.allMdx.edges\n\n    return (\n        <ParentContainer>\n\n            {\n              articles.map(article => {\n                console.log(article)\n                const { id, frontmatter, excerpt, fields } = article.node\n                const { title, section, image, date } = frontmatter\n                const { slug } = fields\n                const fluid = image.childImageSharp.fluid\n\n                let dates = ``\n                data.allSitePage.edges.map(edge => {\n                  const subSlug = edge.node.context.slug\n                  const lastMod = edge.node.context.lastmod\n  \n                  if(subSlug === slug) {\n                      const day = new Date(lastMod).getDate()\n                      const month = new Date(lastMod).getMonth()\n                      const dayCreated = new Date(date).getDate()\n                      const monthCreated = new Date(date).getMonth()\n                      const finalDate = `${formatMonth(monthCreated)} ${dayCreated}`\n                      dates = finalDate\n                    }\n                })\n\n                return (\n                  <Link \n                  style={{ boxShadow: `none`, boxSizing: `border-box` }}\n                  key={id} \n                  to={`/${slug}`}\n                  >\n\n                    <ChildContainer>\n\n                      <ImgContainer>\n                        <Img fluid={fluid} />\n                      </ImgContainer>\n\n                      <DescriptionContainer>\n                        <div>\n                          <SectionTitle>{section}</SectionTitle>\n                          <span \n                            style={{ color: `grey`, \n                            fontSize: `0.65rem`,\n                            fontWeight: `bold`,\n                            fontFamily: `Helvetica, sans-serif`,\n                            letterSpacing:`0.05rem`, \n                            textTransform: `uppercase` \n                            }}> - {dates}</span><br/>\n                          <ArticleTitle>{title}</ArticleTitle>\n                        </div>\n                        <Excerpt>{excerpt}</Excerpt>\n                      </DescriptionContainer>\n                    \n                    </ChildContainer>\n\n                  </Link>\n                )\n              })\n            }\n            \n        </ParentContainer>\n    )\n}\n\nexport default ThoughtsArticles\n\nconst query = graphql`\n{\n  allSitePage(filter: {context: {slug: {regex: \"/(.*?)/\"}}}) {\n    edges {\n      node {\n        context {\n          lastmod\n          slug\n        }\n      }\n    }\n  }\n  allMdx(filter: {frontmatter: {section: {eq: \"Thoughts\"}}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          id\n          frontmatter {\n            author\n            date\n            title\n            section\n            isHero\n            image {\n              childImageSharp {\n                id\n                fluid(maxWidth: 700) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          }\n            fields {\n              slug\n            }\n          excerpt(pruneLength: 250)\n        }\n      }\n  }\n}\n`","import React from 'react'\nimport Layout from '../components/layout/layout'\nimport ThoughtsArticles from '../components/thoughts'\n\nimport SEO from 'react-seo-component'\nimport { useSiteMetadata } from '../hooks/useSiteMetadata'\n\nimport { PageContainer } from '../styled/homePage'\n\nconst Thoughts = ({ data }) => {\n    const {\n        template,\n        title,\n        image,\n        siteUrl,\n        siteLanguage,\n        siteLocale,\n        social: {\n            twitter\n        }\n      } =  useSiteMetadata()\n\n    return (\n        <Layout>\n            <SEO\n                title={title}\n                titleTemplate={template}\n                description={`Style advise from experts`}\n                image={`${siteUrl}${image}`}\n                pathname={siteUrl}\n                siteLanguage={siteLanguage}\n                siteLocale={siteLocale}\n                twitterUsername={twitter}\n                />\n\n            <PageContainer>\n                <ThoughtsArticles />\n            </PageContainer>\n\n        </Layout>\n    )\n}\n\nexport default Thoughts\n"],"sourceRoot":""}