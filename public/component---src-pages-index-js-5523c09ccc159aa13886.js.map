{"version":3,"sources":["webpack:///./content/assets/newbanner.jpg","webpack:///./src/styles/banner.module.scss","webpack:///./src/components/postlist.js","webpack:///./src/components/subSection.js","webpack:///./src/styled/banner/shopBanner.js","webpack:///./src/components/banners/shopBanner.js","webpack:///./src/pages/index.js","webpack:///./src/hooks/useSiteMetadata.js","webpack:///./content/assets/smallbanner.jpg"],"names":["module","exports","PostList","data","postsArr","allMdx","edges","map","post","node","frontmatter","id","excerpt","fields","title","image","section","date","slug","fluid","childImageSharp","dates","allSitePage","edge","subSlug","context","lastmod","dayCreated","Date","getDate","monthCreated","getMonth","finalDate","formatMonth","key","to","style","boxShadow","boxSizing","color","fontSize","fontWeight","fontFamily","letterSpacing","textTransform","SubSection","articles","article","Base","styled","div","imgSml","img","Blurb","h1","ShopBanner","width","margin","backgroundColor","Index","useEffect","document","body","maxWidth","useSiteMetadata","description","template","siteUrl","siteLanguage","siteLocale","twitter","social","href","rel","crossorigin","name","content","titleTemplate","pathname","twitterUsername","padding","textDecoration","textDecorationColor","site","siteMetadata"],"mappings":"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","file":"component---src-pages-index-js-5523c09ccc159aa13886.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/newbanner-ee726a36b2197d636a74c873b6b8ed78.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"banner-module--banner--2iMsJ\",\"banner_small\":\"banner-module--banner_small--a3hR3\"};","import React from 'react'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { formatMonth } from '../utils/utilityFn'\n\nimport { SectionTitle, ArticleTitle, ImgContainer,\n  Excerpt, ChildContainer, DescriptionContainer,\n  ParentContainer } from '../styled/homePage'\n\nconst PostList = () => {\n    const data = useStaticQuery(query)\n    const postsArr = data.allMdx.edges\n\n    return (\n      <>\n      <ParentContainer>\n            {\n                postsArr.map(post => {\n                    const { frontmatter, id, excerpt, fields } = post.node\n                    const { title, image, section, date } = frontmatter\n                    const { slug } = fields\n                    const fluid = image.childImageSharp.fluid\n\n                    let dates = ``\n                    data.allSitePage.edges.map(edge => {\n                      const subSlug = edge.node.context.slug\n                      const lastMod = edge.node.context.lastmod\n\n                      if(subSlug === slug) {\n                          // const day = new Date(lastMod).getDate()\n                          // const month = new Date(lastMod).getMonth()\n                          const dayCreated = new Date(date).getDate()\n                          const monthCreated = new Date(date).getMonth()\n                          const finalDate = `${formatMonth(monthCreated)} ${dayCreated}`\n                          dates = finalDate\n                        }\n                    })\n\n                    return (\n                      <Link key={id} \n                      to={`/${slug}`} \n                      style={{ boxShadow: `none`, boxSizing: `border-box` }}\n                      >\n                      \n                        <ChildContainer>\n\n                          <ImgContainer>\n                            <Img fluid={fluid} />\n                          </ImgContainer>\n\n                          <DescriptionContainer>\n                            <>\n                              <SectionTitle>{section}</SectionTitle>\n                              <span \n                              style={{ color: `grey`, \n                              fontSize: `0.65rem`,\n                              fontWeight: `bold`,\n                              fontFamily: `Helvetica, sans-serif`,\n                              letterSpacing:`0.05rem`, \n                              textTransform: `uppercase` \n                              }}> - {dates}</span><br/>\n                              <ArticleTitle>{title}</ArticleTitle>\n                            </>\n                            <Excerpt>{excerpt}</Excerpt>\n                          </DescriptionContainer>\n\n                        </ChildContainer>\n                        \n                      </Link>\n                    )\n                })\n            }\n        </ParentContainer>\n        </>\n    )\n}\n\nexport default PostList\n\nconst query = graphql`\n{\n  site {\n        siteMetadata {\n        title\n    }\n  }\n  allMdx(filter: {frontmatter: {isHero: {eq: true}, date: {}}}, sort: {fields: frontmatter___date, order: DESC}) {\n    edges {\n      node {\n        id\n        fields {\n          slug\n        }\n        frontmatter {\n          author\n          date\n          title\n          section\n          isHero\n          image {\n            childImageSharp {\n              id\n              fluid(\n                maxWidth: 400\n                ) {\n                  ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        excerpt(pruneLength: 80)\n      }\n    }\n  }\n  allSitePage(filter: {context: {slug: {regex: \"/(.*?)/\"}}}) {\n    edges {\n      node {\n        context {\n          lastmod\n          slug\n        }\n      }\n    }\n  }\n}\n`","import React from 'react'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\nimport Img from 'gatsby-image';\nimport { formatMonth } from '../utils/utilityFn'\n\nimport { SectionTitle, ArticleTitle, Excerpt,\n  ImgContainer,\n  ParentContainer, DescriptionContainer,\n  ChildContainer, HR } from '../styled/listElements'\n\nconst SubSection = () => {\n    const data = useStaticQuery(query)\n    const articles = data.allMdx.edges\n\n    return (\n          <ParentContainer>\n            {\n              articles.map(article => {\n                const { id, frontmatter, excerpt, fields } = article.node\n                const { title, section, image, date } = frontmatter\n                const { slug } = fields\n                const fluid = image.childImageSharp.fluid\n\n                let dates = ``\n                data.allSitePage.edges.map(edge => {\n                  const subSlug = edge.node.context.slug\n                  const lastMod = edge.node.context.lastmod\n\n                  if(subSlug === slug) {\n                      // const day = new Date(lastMod).getDate()\n                      // const month = new Date(lastMod).getMonth()\n                      const dayCreated = new Date(date).getDate()\n                      const monthCreated = new Date(date).getMonth()\n                      const finalDate = `${formatMonth(monthCreated)} ${dayCreated}`\n                      dates = finalDate\n                    }\n                })\n\n                return (\n                  <>\n\n                  <Link \n                  style={{ boxShadow: `none`, boxSizing: `border-box` }}\n                  key={id} \n                  to={`/${slug}`}\n                  >\n                    <ChildContainer>\n\n                        <ImgContainer>\n                          <Img fluid={fluid} />\n                        </ImgContainer>\n\n                        <DescriptionContainer>\n                          <div>\n                            <SectionTitle>{section}</SectionTitle>\n                            <span \n                              style={{ color: `grey`, \n                              fontSize: `0.65rem`,\n                              fontWeight: `bold`,\n                              fontFamily: `Helvetica, sans-serif`,\n                              letterSpacing:`0.05rem`, \n                              textTransform: `uppercase` \n                              }}> - {dates}</span><br/>\n                            <ArticleTitle>{title}</ArticleTitle>\n                          </div>\n                          <Excerpt>{excerpt}</Excerpt>\n                        </DescriptionContainer>\n\n                    </ChildContainer>\n                  </Link>\n                  <HR/>\n                  </>\n                )\n              })\n            }\n            </ParentContainer>\n    )\n}\n\nexport default SubSection\n\nconst query = graphql`\n{\n  allSitePage(filter: {context: {slug: {regex: \"/(.*?)/\"}}}) {\n    edges {\n      node {\n        context {\n          lastmod\n          slug\n        }\n      }\n    }\n  }\n  allMdx(filter: {frontmatter: {isSubSection: {eq: true}}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          id\n          frontmatter {\n            author\n            date\n            title\n            section\n            isHero\n            image {\n              childImageSharp {\n                id\n                fluid(maxWidth: 400) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          }\n            fields {\n              slug\n            }\n          excerpt(pruneLength: 250)\n        }\n      }\n  }\n}\n`","import styled from 'styled-components'\nimport img from '../../../content/assets/newbanner.jpg'\nimport imgSml from '../../../content/assets/smallbanner.jpg'\n\nexport const Base = styled.div`\n    // display: flex;\n    // flex-direction: column;\n    // justify-content: center;\n    // align-items: center;\n    // border: 3px solid black;\n    // background-color: #3B3B3B;\n    background-image: url(${imgSml});\n    position: relative;\n    margin: 0 auto;\n    width: 300px;\n    height: 125px;\n    \n    @media (min-width: 768px) {\n        background-image: url(${img});\n        width: 750px;\n    }\n`\n\nexport const Blurb = styled.h1`\n    font-size: 2.25rem;\n    color: green;\n    // width: 250px;\n    position: absolute;\n    margin: 0;\n    font-family: 'Damion', cursive;\n    padding: 0;\n    color: #323232;\n    left: 20px;\n    bottom: 20px;\n    font-weight: 400;\n    \n    @media (min-width: 768px) {\n        color: #4E4E4E;\n        left: 110px;\n        bottom: 10px;\n        font-size: 3.2rem;\n        font-weight: 400;\n    }\n`","import React from 'react'\nimport { Link, graphql, useStaticQuery } from'gatsby'\n\nimport { Base, Blurb } from '../../styled/banner/shopBanner'\n\nconst ShopBanner = () => {\n    return (\n                <div style={{\n                    width: `max-content`, margin: `0 auto`, backgroundColor:`coral`\n                }}>\n\n                <Link \n                style={{ boxShadow: `none`, width: `100%` }} \n                to={`/shop`}>\n\n                <Base>\n                    <Blurb>Shop the edit</Blurb>\n                </Base>\n                \n                </Link>\n\n                </div>\n    )\n}\n\nexport default ShopBanner","import React, { useEffect } from \"react\"\nimport PostList from '../components/postlist'\nimport SubSection from '../components/subSection'\nimport Layout from \"../components/layout/layout\"\nimport Helmet from 'react-helmet'\nimport Banner1 from '../components/banners/banner1'\n\nimport ShopBanner from '../components/banners/shopBanner'\n\nimport { useSiteMetadata } from '../hooks/useSiteMetadata'\nimport { PageContainer } from '../styled/homePage'\nimport SEO from 'react-seo-component'\n\nconst Index = ({ data }) => {\n\n  useEffect(() => {\n    document.body.style.maxWidth = \"1366px\"\n    document.body.style.margin = \"0 auto\"\n  }, [])\n\n    const {\n      description,\n      template,\n      title,\n      image,\n      siteUrl,\n      siteLanguage,\n      siteLocale,\n      social: {\n          twitter\n      }\n    } =  useSiteMetadata()\n\n  return (\n            <Layout>\n\n              <Helmet>\n                <link href=\"https://ir-uk.amazon-adsystem.com\" rel=\"dns-prefetch\" />\n                <link href=\"https://ir-uk.amazon-adsystem.com\" rel=\"preload\" />\n                <link href=\"https://ir-uk.amazon-adsystem.com\" rel=\"preconnect\" crossorigin/>\n                <meta name=\"verification\" content=\"c1493834aa1a60cb8dd2189fbd7ae5fa\" />\n              </Helmet>\n\n              <SEO\n                title={title}\n                titleTemplate={template}\n                description={description}\n                image={`${siteUrl}${image}`}\n                pathname={siteUrl}\n                siteLanguage={siteLanguage}\n                siteLocale={siteLocale}\n                twitterUsername={twitter}\n                />\n\n              <PageContainer>\n                <PostList />\n                <ShopBanner />\n                {/* <Banner1 /> */}\n                <h1 style={{ \n                  margin: `30px auto -10px auto`, \n                  padding: `0 0 0 30px`,\n                  textDecoration: `underline`,\n                  textDecorationColor: `orangered`,\n                  fontSize: `3.25rem` \n                  }}>Latest</h1>\n                <SubSection />\n              </PageContainer>\n\n            </Layout>\n        )\n}\n\nexport default Index","import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useSiteMetadata = () => {\n    const { site } = useStaticQuery(graphql`\n    query SITE_METADATA_QUERY {\n        site {\n            siteMetadata {\n                description\n                template\n                title\n                image\n                siteUrl\n                siteLanguage\n                siteLocale\n                social {\n                    twitter\n                }\n                \n            }\n        }\n    }\n    `)\n\n    return site.siteMetadata\n}","module.exports = __webpack_public_path__ + \"static/smallbanner-5161f09d4e9f329cdd9540c64d747beb.jpg\";"],"sourceRoot":""}