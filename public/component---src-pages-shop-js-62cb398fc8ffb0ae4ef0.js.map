{"version":3,"sources":["webpack:///./src/hooks/useSiteMetadata.js","webpack:///./src/components/affiliate/footwear/sandals.js","webpack:///./src/components/affiliate/footwear/sneakers.js","webpack:///./src/components/affiliate/accessories/bags.js","webpack:///./src/components/affiliate/bottoms/jeans.js","webpack:///./src/components/affiliate/accessories/sunglasses.js","webpack:///./src/pages/shop.js"],"names":["useSiteMetadata","site","siteMetadata","Sandals","sandalsArray","allMdx","edges","map","sandal","id","node","frontmatter","name","image","description","price","url","href","target","style","boxShadow","key","width","textAlign","fluid","childImageSharp","left","textDecoration","color","borderBottom","fontStyle","fontFamily","fontSize","Sneakers","sneakersArray","sneaker","Bags","bagsArray","bag","Jeans","jeansArray","jean","Sunglasses","sunglassesArray","sunglass","Shop","data","shop_context","useContext","ShopContext","template","title","siteUrl","siteLanguage","siteLocale","twitter","social","titleTemplate","pathname","twitterUsername","display","alignItems","justifyContent","flexWrap","margin","sandals","sneakers","bags","jeans","sunglasses"],"mappings":"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","file":"component---src-pages-shop-js-62cb398fc8ffb0ae4ef0.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby'\n\nexport const useSiteMetadata = () => {\n    const { site } = useStaticQuery(graphql`\n    query SITE_METADATA_QUERY {\n        site {\n            siteMetadata {\n                description\n                template\n                title\n                image\n                siteUrl\n                siteLanguage\n                siteLocale\n                social {\n                    twitter\n                }\n                \n            }\n        }\n    }\n    `)\n\n    return site.siteMetadata\n}","import React from 'react'\nimport Img from 'gatsby-image';\n\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Sandals = () => {\n    \n    const data = useStaticQuery(query)\n    const sandalsArray = data.allMdx.edges\n\n    return (\n        <>\n            {\n              sandalsArray.map(sandal => {\n                const { id } = sandal.node\n                const { name, image, description, price, url } = sandal.node.frontmatter\n\n                return (\n                  <a href={url} target={\"__blank\"} style={{boxShadow: `none`}}>\n                    <div \n                    key={id}\n                    style={{\n                        width: `250px`,\n                        textAlign: `center`\n                    }}\n                    >\n                    <Img fluid={image.childImageSharp.fluid} />\n                    <a \n                        href={url}\n                        target={\"__blank\"}\n                        style={{\n                            left: `50%`,\n                            boxShadow: `none`,\n                            textDecoration: `none`,\n                            color: `black`,\n                            borderBottom: `2.5px solid #ffd000`,\n                            fontStyle: `italic`,\n                            fontFamily: `'Open Sans', sans-serif`,\n                            fontSize: `0.85rem`\n                        }}>\n                        <strong>{name} </strong>\n                        - {description} (£{price})\n                        </a>\n                  </div>\n                  </a>\n                )\n              })\n            }\n        </>\n    )\n}\n\nexport default Sandals\n\nconst query = graphql`\n{\n  allMdx(filter: {frontmatter: {type: {eq: \"Affiliate\"}, category: {eq: \"Sandals\"}}}) {\n    edges {\n      node {\n        id\n        frontmatter {\n          type\n          category\n          name\n          price\n          url\n          description\n          image {\n            childImageSharp {\n              fluid (maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`","\nimport React from 'react'\nimport Img from 'gatsby-image';\n// import ShopBtn from '../post/shopBtnMdx'\n\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Sneakers = () => {\n    \n    const data = useStaticQuery(secondQuery)\n    const sneakersArray = data.allMdx.edges\n\n    return (\n        <>\n\n            {\n              sneakersArray.map(sneaker => {\n                const { id } = sneaker.node\n                const { name, image, description, price, url } = sneaker.node.frontmatter\n\n                return (\n                  <a href={url} target={\"__blank\"} style={{boxShadow: `none`}}>\n                  <div key={id}\n                  style={{\n                    width: `250px`,\n                    textAlign: `center`\n                    }}>\n                    <Img fluid={image.childImageSharp.fluid} />\n                    <a \n                        href={url}\n                        target={\"__blank\"}\n                        style={{\n                            left: `50%`,\n                            boxShadow: `none`,\n                            textDecoration: `none`,\n                            color: `black`,\n                            borderBottom: `2.5px solid #ffd000`,\n                            fontStyle: `italic`,\n                            fontFamily: `'Open Sans', sans-serif`,\n                            fontSize: `0.85rem`\n                        }}>\n                        <strong>{name} </strong>\n                        - {description} (£{price})\n                        </a>\n                  </div>\n                  </a>\n                )\n              })\n            }\n            \n        </>\n    )\n}\n\nexport default Sneakers\n\nconst secondQuery = graphql`\n{\n  allMdx(filter: {frontmatter: {type: {eq: \"Affiliate\"}, category: {eq: \"Sneakers\"}}}) {\n    edges {\n      node {\n        id\n        frontmatter {\n          type\n          category\n          description\n          name\n          url\n          price\n          image {\n            childImageSharp {\n              fluid (maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`","import React from 'react'\nimport Img from 'gatsby-image';\n\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Bags = () => {\n    \n    const data = useStaticQuery(secondQuery)\n    const bagsArray = data.allMdx.edges\n\n    return (\n        <>\n            {\n              bagsArray.map(bag => {\n                const { id } = bag.node\n                const { name, image, description, price, url } = bag.node.frontmatter\n\n                return (\n\n                  <a href={url} target={\"__blank\"} style={{boxShadow: `none`}}>\n                  \n                    <div \n                    key={id}\n                    style={{\n                        width: `250px`,\n                        textAlign: `center`\n                    }}\n                    >\n                    <Img fluid={image.childImageSharp.fluid} />\n                    <a \n                        href={url}\n                        target={\"__blank\"}\n                        style={{\n                            left: `50%`,\n                            boxShadow: `none`,\n                            textDecoration: `none`,\n                            color: `black`,\n                            borderBottom: `2.5px solid #ffd000`,\n                            fontStyle: `italic`,\n                            fontFamily: `'Open Sans', sans-serif`,\n                            fontSize: `0.85rem`\n                        }}>\n                        <strong>{name} </strong>\n                        - {description} (£{price})\n                        </a>\n                  </div>\n                  \n                  </a>\n                )\n              })\n            }\n        </>\n    )\n}\n\nexport default Bags\n\nconst secondQuery = graphql`\n{\n  allMdx(filter: {frontmatter: {type: {eq: \"Affiliate\"}, category: {eq: \"Bags\"}}}) {\n    edges {\n      node {\n        id\n        frontmatter {\n          type\n          category\n          name\n          price\n          url\n          description\n          image {\n            childImageSharp {\n              fluid (maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`","import React from 'react'\nimport Img from 'gatsby-image';\n\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Jeans = () => {\n    \n    const data = useStaticQuery(query)\n    const jeansArray = data.allMdx.edges\n\n    return (\n        <>\n            {\n              jeansArray.map(jean => {\n                const { id } = jean.node\n                const { name, image, description, price, url } = jean.node.frontmatter\n\n                return (\n                  <a href={url} target={\"__blank\"} style={{boxShadow: `none`}}>\n                    <div \n                    key={id}\n                    style={{\n                        width: `250px`,\n                        textAlign: `center`\n                    }}\n                    >\n                    <Img fluid={image.childImageSharp.fluid} />\n                    <a \n                        href={url}\n                        target={\"__blank\"}\n                        style={{\n                            left: `50%`,\n                            boxShadow: `none`,\n                            textDecoration: `none`,\n                            color: `black`,\n                            borderBottom: `2.5px solid #ffd000`,\n                            fontStyle: `italic`,\n                            fontFamily: `'Open Sans', sans-serif`,\n                            fontSize: `0.85rem`\n                        }}>\n                        <strong>{name} </strong>\n                        - {description} (£{price})\n                        </a>\n                  </div>\n                  </a>\n                )\n              })\n            }\n        </>\n    )\n}\n\nexport default Jeans\n\nconst query = graphql`\n{\n  allMdx(filter: {frontmatter: {type: {eq: \"Affiliate\"}, category: {eq: \"Jeans\"}}}) {\n    edges {\n      node {\n        id\n        frontmatter {\n          type\n          category\n          name\n          price\n          url\n          description\n          image {\n            childImageSharp {\n              fluid (maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`","import React from 'react'\nimport Img from 'gatsby-image';\n\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Sunglasses = () => {\n    \n    const data = useStaticQuery(query)\n    const sunglassesArray = data.allMdx.edges\n\n    return (\n        <>\n            {\n              sunglassesArray.map(sunglass => {\n                const { id } = sunglass.node\n                const { name, image, description, price, url } = sunglass.node.frontmatter\n\n                return (\n\n                    <a href={url} target={\"__blank\"} style={{boxShadow: `none`}}>\n                        \n                        <div \n                        key={id}\n                        style={{\n                            width: `250px`,\n                            textAlign: `center`\n                        }}\n                        >\n                        \n                        <Img fluid={image.childImageSharp.fluid} />\n                        <a \n                            href={url}\n                            target={\"__blank\"}\n                            style={{\n                                left: `50%`,\n                                boxShadow: `none`,\n                                textDecoration: `none`,\n                                color: `black`,\n                                borderBottom: `2.5px solid #ffd000`,\n                                fontStyle: `italic`,\n                                fontFamily: `'Open Sans', sans-serif`,\n                                fontSize: `0.85rem`\n                            }}>\n                            <strong>{name} </strong>\n                            - {description} (£{price})\n                            </a>\n\n                    </div>\n                  </a>\n                )\n              })\n            }\n        </>\n    )\n}\n\nexport default Sunglasses\n\nconst query = graphql`\n{\n  allMdx(filter: {frontmatter: {type: {eq: \"Affiliate\"}, category: {eq: \"Sunglasses\"}}}) {\n    edges {\n      node {\n        id\n        frontmatter {\n          type\n          category\n          name\n          price\n          url\n          description\n          image {\n            childImageSharp {\n              fluid (maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`","import React, { useState, useContext } from 'react'\nimport Layout from '../components/layout/layout'\n// import Skus from '../components/skus'\nimport SEO from 'react-seo-component'\nimport { useSiteMetadata } from '../hooks/useSiteMetadata'\n\nimport Sandals from '../components/affiliate/footwear/sandals'\nimport Sneakers from '../components/affiliate/footwear/sneakers'\nimport Bags from '../components/affiliate/accessories/bags'\nimport Jeans from '../components/affiliate/bottoms/jeans'\nimport Sunglasses from '../components/affiliate/accessories/sunglasses'\n\nimport { Btn, ProductsNav, PageWrapper } from '../styled/shop'\n\nimport { ShopContext } from '../context/shopContext'\n\nconst Shop = ({ data }) => {\n\n  const shop_context = useContext(ShopContext)\n  \n    const {\n      template,\n      title,\n      image,\n      siteUrl,\n      siteLanguage,\n      siteLocale,\n      social: {\n          twitter\n      }\n    } =  useSiteMetadata()\n\n    return (\n            <Layout>\n\n            <SEO\n            title={title}\n            titleTemplate={template}\n            description={`Shop our edit of the best fashion and accessories products`}\n            image={`${siteUrl}${image}`}\n            pathname={siteUrl}\n            siteLanguage={siteLanguage}\n            siteLocale={siteLocale}\n            twitterUsername={twitter}\n            />\n            \n            <PageWrapper>\n            \n            <div style={{ \n              display: `flex`,\n              alignItems: `center`,\n              width: `75%`,\n              justifyContent: `space-around`,\n              flexWrap: `wrap`,\n              margin: `0px auto 0px auto`,\n            }}>\n\n              { shop_context.sandals ? <Sandals /> : null }\n              { shop_context.sneakers ? <Sneakers/> : null }\n              { shop_context.bags ? <Bags /> : null }\n              { shop_context.jeans ? <Jeans /> : null }\n              { shop_context.sunglasses ? <Sunglasses /> : null }\n            </div>\n\n            </PageWrapper>\n            {/* <Skus /> */}\n            </Layout>\n    )\n}\n\nexport default Shop"],"sourceRoot":""}